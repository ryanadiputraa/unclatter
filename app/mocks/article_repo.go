// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	context "context"

	article "github.com/ryanadiputraa/unclatter/app/article"

	mock "github.com/stretchr/testify/mock"

	pagination "github.com/ryanadiputraa/unclatter/app/pagination"
)

// ArticleRepository is an autogenerated mock type for the ArticleRepository type
type ArticleRepository struct {
	mock.Mock
}

// FindByID provides a mock function with given fields: ctx, articleID
func (_m *ArticleRepository) FindByID(ctx context.Context, articleID string) (*article.Article, error) {
	ret := _m.Called(ctx, articleID)

	if len(ret) == 0 {
		panic("no return value specified for FindByID")
	}

	var r0 *article.Article
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*article.Article, error)); ok {
		return rf(ctx, articleID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *article.Article); ok {
		r0 = rf(ctx, articleID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*article.Article)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, articleID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: ctx, userID, page
func (_m *ArticleRepository) List(ctx context.Context, userID string, page pagination.Pagination) ([]*article.Article, int64, error) {
	ret := _m.Called(ctx, userID, page)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []*article.Article
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, pagination.Pagination) ([]*article.Article, int64, error)); ok {
		return rf(ctx, userID, page)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, pagination.Pagination) []*article.Article); ok {
		r0 = rf(ctx, userID, page)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*article.Article)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, pagination.Pagination) int64); ok {
		r1 = rf(ctx, userID, page)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, pagination.Pagination) error); ok {
		r2 = rf(ctx, userID, page)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Save provides a mock function with given fields: ctx, arg
func (_m *ArticleRepository) Save(ctx context.Context, arg article.Article) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, article.Article) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: ctx, arg
func (_m *ArticleRepository) Update(ctx context.Context, arg article.Article) (*article.Article, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *article.Article
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, article.Article) (*article.Article, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, article.Article) *article.Article); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*article.Article)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, article.Article) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewArticleRepository creates a new instance of ArticleRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewArticleRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ArticleRepository {
	mock := &ArticleRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
